1886. Determine Whether Matrix Can Be Obtained By Rotation


Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.

 

Example 1:


Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.
Example 2:


Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
Output: false
Explanation: It is impossible to make mat equal to target by rotating mat.
Example 3:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

class Solution {
  public boolean findRotation(int[][] mat, int[][] target) {
    for (int i = 0; i < 4; ++i) {
      if (Arrays.deepEquals(mat, target))
          // Arrays.deepEquals() is used to check whether two arrays of single dimensional or multi-dimensional arrays are equal or not(Java.util.Arrays.deepEquals()).
        return true;
      rotate(mat);
    }
    return false;
  }

  private void rotate(int[][] M) {
    for (int i = 0, j = M.length - 1; i < j; ++i, --j) {
      int[] temp = M[i];
      M[i] = M[j];
      M[j] = temp;
    }
    for (int i = 0; i < M.length; ++i)
      for (int j = i + 1; j < M.length; ++j) {
        final int temp = M[i][j];
        M[i][j] = M[j][i];
        M[j][i] = temp;
      }
  }
}

/*
// Why is this wrong can't understand...


class Solution {
    public boolean findRotation(int[][] matrix, int[][] target) {
        int x = 0;
        while(x < matrix.length-1){
            for(int i=0; i<matrix.length; i++)  {  
                for(int j=i; j<matrix[i].length; j++)  { 
                    if(i!=j){
                        int temp = matrix[i][j];  
                        matrix[i][j]=matrix[j][i];  
                        matrix[j][i]=temp;  
                    }
                }  
            }
            for(int i=0; i<matrix.length; i++){  
                for(int j=i; j<matrix[i].length/2; j++){  
                    if(i!=j){  
                        int temp = matrix[i][j];  
                        matrix[i][j]=matrix[i][matrix[i].length-j-1];  
                        matrix[i][matrix[i].length-j-1]=temp;  
                    }  
                }  
            }
            x++;
        }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[i].length;j++){
                if(matrix[i][j]==target[i][j]){
                    return true;
                }     
            }
        }
        return false;
    }
}
*/
